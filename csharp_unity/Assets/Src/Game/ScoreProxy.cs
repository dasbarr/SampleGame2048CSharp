using System;

namespace sample_game {
    
    /// <summary>
    /// Holds info about player score.
    /// </summary>
    public class ScoreProxy {
        
        //-------------------------------------------------------------
        // Nested
        //-------------------------------------------------------------
        
        //-------------------------------------------------------------
        // Dependencies
        //-------------------------------------------------------------
        
        //-------------------------------------------------------------
        // Class constants
        //-------------------------------------------------------------
        
        //-------------------------------------------------------------
        // Class variables
        //-------------------------------------------------------------
        
        //-------------------------------------------------------------
        // Class methods
        //-------------------------------------------------------------
        
        //-------------------------------------------------------------
        // Constructor/destructor
        //-------------------------------------------------------------
        
        //-------------------------------------------------------------
        // Variables
        //-------------------------------------------------------------
        
        //-------------------------------------------------------------
        // Events
        //-------------------------------------------------------------

        public event Action ScoreChanged;

        //-------------------------------------------------------------
        // Properties
        //-------------------------------------------------------------

        public int currentScore { get; private set; } = 0;
        public int bestScore { get; private set; } = 0;

        /// <summary>
        /// Indicates if there is a new record.
        /// </summary>
        public bool isNewRecord => currentScore == bestScore;

        //-------------------------------------------------------------
        // Private properties serialized for Unity
        //-------------------------------------------------------------

        //-------------------------------------------------------------
        // Public methods
        //-------------------------------------------------------------
        
        /// <summary>
        /// Clears current score (best score will remain untouched).
        /// </summary>
        public void ClearCurrentScore() {
            currentScore = 0;

            ScoreChanged?.Invoke();
        }
        
        /// <summary>
        /// Adds points to the current score. Updates best score if necessary.
        /// </summary>
        /// <param name="pointsToAdd">That number of points will be added to the score.</param>
        public void AddScore(int pointsToAdd) {
            currentScore += pointsToAdd;

            // update best score (if necessary)
            if (currentScore > bestScore)
                bestScore = currentScore;

            ScoreChanged?.Invoke();
        }

        //-------------------------------------------------------------
        // Protected methods
        //-------------------------------------------------------------

        //-------------------------------------------------------------
        // Private methods
        //-------------------------------------------------------------

        //-------------------------------------------------------------
        // Unity methods
        //-------------------------------------------------------------

        //-------------------------------------------------------------
        // Handlers
        //-------------------------------------------------------------
    }
} // namespace sample_game